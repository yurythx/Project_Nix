# Generated by Django 5.2.4 on 2025-08-02 15:35

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único do comentário', unique=True, verbose_name='UUID')),
                ('content', models.TextField(help_text='Conteúdo do comentário', validators=[django.core.validators.MinLengthValidator(3)], verbose_name='conteúdo')),
                ('object_id', models.PositiveIntegerField(verbose_name='ID do objeto')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('approved', 'Aprovado'), ('rejected', 'Rejeitado'), ('spam', 'Spam'), ('deleted', 'Deletado')], default='pending', help_text='Status de moderação do comentário', max_length=20, verbose_name='status')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Endereço IP do autor', null=True, verbose_name='endereço IP')),
                ('user_agent', models.TextField(blank=True, help_text='User agent do navegador', verbose_name='user agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
                ('moderated_at', models.DateTimeField(blank=True, help_text='Data e hora da moderação', null=True, verbose_name='moderado em')),
                ('is_edited', models.BooleanField(default=False, help_text='Se o comentário foi editado', verbose_name='editado')),
                ('is_pinned', models.BooleanField(default=False, help_text='Se o comentário está fixado no topo', verbose_name='fixado')),
                ('likes_count', models.PositiveIntegerField(default=0, help_text='Número de curtidas', verbose_name='curtidas')),
                ('dislikes_count', models.PositiveIntegerField(default=0, help_text='Número de descurtidas', verbose_name='descurtidas')),
                ('replies_count', models.PositiveIntegerField(default=0, help_text='Número de respostas', verbose_name='respostas')),
                ('author', models.ForeignKey(help_text='Usuário que fez o comentário', on_delete=django.db.models.deletion.CASCADE, related_name='user_comments', to=settings.AUTH_USER_MODEL, verbose_name='autor')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='tipo de conteúdo')),
                ('moderated_by', models.ForeignKey(blank=True, help_text='Usuário que moderou o comentário', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_comments', to=settings.AUTH_USER_MODEL, verbose_name='moderado por')),
                ('parent', models.ForeignKey(blank=True, help_text='Comentário ao qual este é uma resposta', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='comments.comment', verbose_name='comentário pai')),
            ],
            options={
                'verbose_name': 'comentário',
                'verbose_name_plural': 'comentários',
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction', models.CharField(choices=[('like', 'Curtir'), ('dislike', 'Descurtir')], help_text='Tipo de reação', max_length=10, verbose_name='reação')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='comments.comment', verbose_name='comentário')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_reactions', to=settings.AUTH_USER_MODEL, verbose_name='usuário')),
            ],
            options={
                'verbose_name': 'reação ao comentário',
                'verbose_name_plural': 'reações aos comentários',
            },
        ),
        migrations.CreateModel(
            name='CommentModeration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(help_text='Nome do app (ex: books, pages)', max_length=100, verbose_name='app')),
                ('model_name', models.CharField(help_text='Nome do modelo (ex: Book, Page)', max_length=100, verbose_name='modelo')),
                ('moderation_type', models.CharField(choices=[('auto_approve', 'Aprovação Automática'), ('manual_review', 'Revisão Manual'), ('auto_reject', 'Rejeição Automática')], default='manual_review', help_text='Tipo de moderação aplicada', max_length=20, verbose_name='tipo de moderação')),
                ('auto_approve_trusted_users', models.BooleanField(default=True, help_text='Aprova automaticamente comentários de usuários confiáveis', verbose_name='aprovar usuários confiáveis')),
                ('require_email_verification', models.BooleanField(default=True, help_text='Exige que o usuário tenha email verificado', verbose_name='exigir email verificado')),
                ('max_comment_length', models.PositiveIntegerField(default=1000, help_text='Tamanho máximo do comentário em caracteres', verbose_name='tamanho máximo')),
                ('min_comment_length', models.PositiveIntegerField(default=3, help_text='Tamanho mínimo do comentário em caracteres', verbose_name='tamanho mínimo')),
                ('enable_spam_filter', models.BooleanField(default=True, help_text='Habilita filtro automático de spam', verbose_name='filtro de spam')),
                ('blocked_words', models.TextField(blank=True, help_text='Lista de palavras bloqueadas (uma por linha)', verbose_name='palavras bloqueadas')),
                ('blocked_ips', models.TextField(blank=True, help_text='Lista de IPs bloqueados (um por linha)', verbose_name='IPs bloqueados')),
                ('max_comments_per_hour', models.PositiveIntegerField(default=10, help_text='Máximo de comentários por usuário por hora', verbose_name='comentários por hora')),
                ('max_comments_per_day', models.PositiveIntegerField(default=50, help_text='Máximo de comentários por usuário por dia', verbose_name='comentários por dia')),
                ('notify_moderators', models.BooleanField(default=True, help_text='Notifica moderadores sobre novos comentários', verbose_name='notificar moderadores')),
                ('notify_authors', models.BooleanField(default=True, help_text='Notifica autores sobre respostas', verbose_name='notificar autores')),
                ('is_active', models.BooleanField(default=True, help_text='Se esta configuração está ativa', verbose_name='ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
            ],
            options={
                'verbose_name': 'configuração de moderação',
                'verbose_name_plural': 'configurações de moderação',
                'indexes': [models.Index(fields=['app_label', 'model_name'], name='comments_co_app_lab_040d6c_idx')],
                'unique_together': {('app_label', 'model_name')},
            },
        ),
        migrations.CreateModel(
            name='CommentNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único da notificação', unique=True, verbose_name='UUID')),
                ('notification_type', models.CharField(choices=[('reply', 'Resposta ao Comentário'), ('mention', 'Menção em Comentário'), ('like', 'Curtida no Comentário'), ('moderation', 'Moderação do Comentário'), ('report', 'Comentário Reportado'), ('approval', 'Comentário Aprovado'), ('rejection', 'Comentário Rejeitado')], help_text='Tipo de notificação', max_length=20, verbose_name='tipo')),
                ('title', models.CharField(help_text='Título da notificação', max_length=200, verbose_name='título')),
                ('message', models.TextField(help_text='Conteúdo da notificação', verbose_name='mensagem')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ID do objeto')),
                ('is_read', models.BooleanField(default=False, help_text='Se a notificação foi lida', verbose_name='lida')),
                ('is_sent', models.BooleanField(default=False, help_text='Se a notificação foi enviada (email/push)', verbose_name='enviada')),
                ('is_real_time_sent', models.BooleanField(default=False, help_text='Se foi enviada via WebSocket', verbose_name='enviada em tempo real')),
                ('data', models.JSONField(blank=True, default=dict, help_text='Dados adicionais da notificação', verbose_name='dados adicionais')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('read_at', models.DateTimeField(blank=True, help_text='Data e hora em que foi lida', null=True, verbose_name='lida em')),
                ('sent_at', models.DateTimeField(blank=True, help_text='Data e hora em que foi enviada', null=True, verbose_name='enviada em')),
                ('comment', models.ForeignKey(help_text='Comentário relacionado à notificação', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='comments.comment', verbose_name='comentário')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='tipo de conteúdo')),
                ('recipient', models.ForeignKey(help_text='Usuário que receberá a notificação', on_delete=django.db.models.deletion.CASCADE, related_name='comment_notifications', to=settings.AUTH_USER_MODEL, verbose_name='destinatário')),
                ('sender', models.ForeignKey(help_text='Usuário que causou a notificação', on_delete=django.db.models.deletion.CASCADE, related_name='sent_comment_notifications', to=settings.AUTH_USER_MODEL, verbose_name='remetente')),
            ],
            options={
                'verbose_name': 'notificação de comentário',
                'verbose_name_plural': 'notificações de comentários',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModerationAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('approved', 'Aprovado'), ('rejected', 'Rejeitado'), ('spam', 'Marcado como Spam'), ('deleted', 'Deletado'), ('edited', 'Editado'), ('pinned', 'Fixado'), ('unpinned', 'Desfixado')], help_text='Ação realizada', max_length=20, verbose_name='ação')),
                ('reason', models.TextField(blank=True, help_text='Motivo da ação de moderação', verbose_name='motivo')),
                ('previous_status', models.CharField(blank=True, help_text='Status do comentário antes da ação', max_length=20, verbose_name='status anterior')),
                ('previous_content', models.TextField(blank=True, help_text='Conteúdo do comentário antes da edição', verbose_name='conteúdo anterior')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP do moderador', null=True, verbose_name='endereço IP')),
                ('user_agent', models.TextField(blank=True, help_text='User agent do moderador', verbose_name='user agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderation_actions', to='comments.comment', verbose_name='comentário')),
                ('moderator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderation_actions', to=settings.AUTH_USER_MODEL, verbose_name='moderador')),
            ],
            options={
                'verbose_name': 'ação de moderação',
                'verbose_name_plural': 'ações de moderação',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModerationQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('low', 'Baixa'), ('normal', 'Normal'), ('high', 'Alta'), ('urgent', 'Urgente')], default='normal', help_text='Prioridade na fila de moderação', max_length=10, verbose_name='prioridade')),
                ('is_spam_suspected', models.BooleanField(default=False, help_text='Se o comentário é suspeito de spam', verbose_name='suspeita de spam')),
                ('is_reported', models.BooleanField(default=False, help_text='Se o comentário foi reportado por usuários', verbose_name='reportado')),
                ('reports_count', models.PositiveIntegerField(default=0, help_text='Número de vezes que foi reportado', verbose_name='número de reports')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Moderador responsável', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_moderation_queue', to=settings.AUTH_USER_MODEL, verbose_name='atribuído para')),
                ('comment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='moderation_queue', to='comments.comment', verbose_name='comentário')),
            ],
            options={
                'verbose_name': 'fila de moderação',
                'verbose_name_plural': 'filas de moderação',
                'ordering': ['-priority', '-reports_count', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_on_reply', models.BooleanField(default=True, help_text='Receber email quando alguém responder seus comentários', verbose_name='email para respostas')),
                ('email_on_mention', models.BooleanField(default=True, help_text='Receber email quando for mencionado', verbose_name='email para menções')),
                ('email_on_like', models.BooleanField(default=False, help_text='Receber email quando curtirem seus comentários', verbose_name='email para curtidas')),
                ('email_on_moderation', models.BooleanField(default=True, help_text='Receber email sobre moderação de comentários', verbose_name='email para moderação')),
                ('realtime_on_reply', models.BooleanField(default=True, help_text='Receber notificações em tempo real para respostas', verbose_name='tempo real para respostas')),
                ('realtime_on_mention', models.BooleanField(default=True, help_text='Receber notificações em tempo real para menções', verbose_name='tempo real para menções')),
                ('realtime_on_like', models.BooleanField(default=True, help_text='Receber notificações em tempo real para curtidas', verbose_name='tempo real para curtidas')),
                ('realtime_on_moderation', models.BooleanField(default=True, help_text='Receber notificações em tempo real para moderação', verbose_name='tempo real para moderação')),
                ('digest_frequency', models.CharField(choices=[('never', 'Nunca'), ('daily', 'Diário'), ('weekly', 'Semanal'), ('monthly', 'Mensal')], default='weekly', help_text='Frequência do resumo de notificações por email', max_length=20, verbose_name='frequência do resumo')),
                ('quiet_hours_start', models.TimeField(blank=True, help_text='Hora de início do período sem notificações', null=True, verbose_name='início do período silencioso')),
                ('quiet_hours_end', models.TimeField(blank=True, help_text='Hora de fim do período sem notificações', null=True, verbose_name='fim do período silencioso')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='comment_notification_preferences', to=settings.AUTH_USER_MODEL, verbose_name='usuário')),
            ],
            options={
                'verbose_name': 'preferência de notificação',
                'verbose_name_plural': 'preferências de notificação',
            },
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['content_type', 'object_id'], name='comments_co_content_cff8bd_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['status', 'created_at'], name='comments_co_status_08b9ef_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['author', 'created_at'], name='comments_co_author__a235af_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['parent'], name='comments_co_parent__fdf1ec_idx'),
        ),
        migrations.AddIndex(
            model_name='commentlike',
            index=models.Index(fields=['comment', 'reaction'], name='comments_co_comment_17d306_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='commentlike',
            unique_together={('comment', 'user')},
        ),
        migrations.AddIndex(
            model_name='commentnotification',
            index=models.Index(fields=['recipient', 'is_read', 'created_at'], name='comments_co_recipie_5d1750_idx'),
        ),
        migrations.AddIndex(
            model_name='commentnotification',
            index=models.Index(fields=['comment', 'notification_type'], name='comments_co_comment_f1a841_idx'),
        ),
        migrations.AddIndex(
            model_name='commentnotification',
            index=models.Index(fields=['sender', 'created_at'], name='comments_co_sender__07dd38_idx'),
        ),
        migrations.AddIndex(
            model_name='commentnotification',
            index=models.Index(fields=['is_sent', 'created_at'], name='comments_co_is_sent_e067b7_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationaction',
            index=models.Index(fields=['comment', 'created_at'], name='comments_mo_comment_c64321_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationaction',
            index=models.Index(fields=['moderator', 'created_at'], name='comments_mo_moderat_29cc86_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationaction',
            index=models.Index(fields=['action', 'created_at'], name='comments_mo_action_d037a5_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationqueue',
            index=models.Index(fields=['priority', 'created_at'], name='comments_mo_priorit_eb6249_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationqueue',
            index=models.Index(fields=['assigned_to', 'created_at'], name='comments_mo_assigne_56e862_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationqueue',
            index=models.Index(fields=['is_spam_suspected'], name='comments_mo_is_spam_94f7da_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationqueue',
            index=models.Index(fields=['is_reported'], name='comments_mo_is_repo_2498e7_idx'),
        ),
    ]
